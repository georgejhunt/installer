#!/bin/sh -x
# tinycore script to partition, and load the OS for XSCE

# first look for command line flags 
TARGET_LOADER="MBR"
EFI=`grep -w efi /proc/cmdline`
MBR=`grep -w mbr /proc/cmdline`
i686=`grep -w i686 /proc/cmdline`
x86_64=`grep -w x86_64 /proc/cmdline`
PAYLOAD='netinst' # default for the initial install
PAYLOAD_ARCH="x86_64"

# get the variables that are being passed back and forth
#  in particular, PAYLOAD is the name of the tgz image
source /mnt/sdb2/tce/installer.conf
# TARLIB controls whether a separate library tar is generated

SRCDIR=$(cd `dirname ${0}`; pwd)
curdir=`pwd`

# wipe out the partition table
if [ -d /mnt/sdb2/tce ];then
	dd ip=/dev/zero of=/dev/sda bs=512 count=2
fi
if [ ! -z "$MBR" ]; then
# for testing purposes we need to be able to delete a gpt and initialize
#  as a mbr partition table. But only gdisk knows where gpt is 
# First determine if current partition table is gpt
gpt=`blkid /dev/sda | grep gpt`
if [ ! -z "$gpt" ]; then
# following deletes (zaps) a gpt partition table
cat << EOF | gdisk /dev/sda
x
z
y
y
EOF
fi

# now create a regular mbr partition table
cat << EOF | fdisk /dev/sda
d
1
d
2
d
3
d
4
n
p
1
1
+500M
n
p
2

+50G
n
p
3


a
1
t
1
b
w
EOF

else
# create a gpt partition table
cat << EOF | gdisk /dev/sda
d
1
d
2
d
3
d
4
n
1
1
+500M
ef00
n
2

+50G
8300
n
3


8300
w
y
EOF
fi

partprobe /dev/sda
until [ -e /dev/sda1 ]; do sleep .25; done

mkdosfs -F 32 -n boot /dev/sda1
mkfs.ext4 -L rootfs /dev/sda2
mkfs.ext4 -L library /dev/sda3

#mount /dev/sda1 /mnt/sda1
mount /dev/sda2 /mnt/sda2
#mount /dev/sda3 /mnt/sda3

#create mount points for the partitions
mkdir -p /mnt/sda2/boot/efi
mkdir -p /mnt/sda2/library
# mount them
mount /dev/sda1 /mnt/sda2/boot/efi
mount /dev/sda3 /mnt/sda2/library

sleep 1
# I'm hoping that this operation will wait until the mount is completed
cd /mnt/sda2/library
mkdir -p cache

# put the root file system in place
cd /mnt/sda2/
until [ -d /mnt/sda2/library/cache ]; do sleep .25; done
tar -xf ${SRCDIR}/${FC_VER}/${PAYLOAD_ARCH}/${PAYLOAD_ARCH}fc${FC_VER}_${PAYLOAD}.tgz

# need to put the library contents in place via a separate tar file
if [ "$PAYLOAD" != "netinst" -a "$TARLIB" == "true" ];then
  cd /mnt/sda2/library
  tar -xf ${SRCDIR}/${FC_VER}/${PAYLOAD_ARCH}/${PAYLOAD_ARCH}fc${FC_VER}${PAYLOAD}-library.tgz
fi

cd $curdir 

# create a fstab
cat << EOF > /mnt/sda2/etc/fstab
LABEL=rootfs	/	ext4	defaults	0	1
LABEL=boot	/boot/efi	vfat	defaults,nofail	0	0
LABEL=library	/library	ext4	defaults	0	2
EOF

# now install the grub mbr loader, and the grub EFI loader
# following set up the mbr boot requirements
grub-install --boot-directory=/mnt/sda2/boot /dev/sda
cp ${SRCDIR}/grub.cfg.target /mnt/sda2/boot/grub/grub.cfg

# following are attempting to set up EFI boot requirements
#mkdir -p /mnt/sda1/EFI
#mkdir /home/tc/img
#mount /dev/sdb1 /mnt/sdb1
#mount /mnt/sdb1/boot/images/efiboot.img /home/tc/img
#cp -r /home/tc/img/* /mnt/sda1/
grub-install --target=i386-efi --efi-directory=/mnt/sda2/boot/efi --bootloader-id=boot --boot-directory=/mnt/sda2/boot --recheck 
cp ${SRCDIR}/grub.cfg.target.efi /mnt/sda1/EFI/BOOT/grub.cfg

# make symbolic links for the kernel, and initramfs
kernel=`find /mnt/sda2/boot | grep /vmlinuz-3`
ln -sf $(basename $kernel) /mnt/sda2/boot/vmlinuz

initrd=`find /mnt/sda2/boot | grep initramfs-3`
ln -sf $(basename $initrd) /mnt/sda2/boot/initramfs

# put a folder on the library partition, so that later we can look for it
mkdir -p /mnt/sda3/cache
# the shuttle is where to put any scripts to make deployment wide changes
mkdir -p /mnt/sda2/opt/schoolserver/xsce/scripts/installer
cp /mnt/sdb2/tce/shuttle/xsce-after-installer /mnt/sda2/opt/schoolserver/xsce/scripts/installer/
cp /mnt/sdb2/tce/shuttle/sysprep /mnt/sda2/opt/schoolserver/xsce/scripts/installer/
ln -s /opt/schoolserver/xsce/scripts/installer/sysprep /mnt/sdb2/usr/local/sbin/sysprep
cp /mnt/sdb2/tce/shuttle/finish-install.service /mnt/sda2/etc/systemd/system/
# done!

# vim: ts=4 et
